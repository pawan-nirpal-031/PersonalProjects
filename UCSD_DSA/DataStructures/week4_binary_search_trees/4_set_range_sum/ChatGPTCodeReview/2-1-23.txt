The code for insert, splay, and delete seems to be correct but there are a few issues that can cause unexpected results:

In the Insert function, the new node's parent is not set to nullptr before inserting it in the tree.
In the Splay function, when the value of the node is not found, it returns nullptr instead of splaying the last node visited.
In the Delete function, the function ExplicitSplay should be called before deleting a node to bring the node to be deleted to the root. The tree's root node is not updated after deletion, which can cause issues with subsequent operations on the tree.
In the Delete function, the case where the node has two children is not handled.
So, the code requires a few modifications to function correctly.




Pawan Nirpal
your first comment is wrong according to me because GetNewNode function calls constructor which sets the parent to null
I apologize for that mistake in my previous comment. You are correct, the constructor for the Node class would initialize the parent member variable to null.




Pawan Nirpal
is the splay function correct now   Node *SplayOpreator(Node *Root, int Key){
    if(Key==Root->Value or Root==nullptr) return Root;
    Node *NodeToSplay = nullptr;
    Node *TreeRoot = Root; 
    while(TreeRoot->Value!=Key){
      if(Key<TreeRoot->Value){
        if(TreeRoot->Left==nullptr){
          NodeToSplay = TreeRoot;
          break;
        }else{
          TreeRoot = TreeRoot->Left;
          NodeToSplay = TreeRoot;
        }
      }else{
        if(TreeRoot->Right==nullptr){
          NodeToSplay = TreeRoot; 
          break;
        }else{
          TreeRoot = TreeRoot->Right;
          NodeToSplay = TreeRoot;
        }
      }
    }
    return ExplicitSplay(NodeToSplay);
  }
The SplayOperator function appears to be correct. It searches the key in the BST and returns the node to be splayed by calling ExplicitSplay. However, you should also check if ExplicitSplay implementation is correct.




Pawan Nirpal
as per your second comment : In the Splay function, when the value of the node is not found, it returns nullptr instead of splaying the last node visited. is the splay opreation correct now?
The Splay operation should splay the last node visited if the value is not found in the tree, instead of returning nullptr. The code should be updated to return ExplicitSplay(NodeToSplay) instead of just NodeToSplay.




Pawan Nirpal
I have returned ExplicitSplay(NodeToSplay) and not NodeToSplay
This looks like it would perform the correct splaying operation. The function will traverse the tree to find the node with the specified key, and then splay that node to the root of the tree. This implementation should work as expected as long as the implementation of the ExplicitSplay function is correct.




Pawan Nirpal
check if the function ExplicitSplay is correct or not Node *ExplicitSplay(Node *NodeToBeSplayed){
    while(NodeToBeSplayed->Parent!=nullptr){
      Node *Parent = NodeToBeSplayed->Parent; 
      if(Parent==nullptr) return NodeToBeSplayed;
      if(NodeToBeSplayed->Value<Parent->Value){// This is left node hence right rotate
        RightRotateSubtree(Parent);
      }else{
        LeftRotateSubtree(Parent);
      }
    }
    SetRoot(NodeToBeSplayed);
    return TreeRoot;
  }
The function ExplicitSplay seems to be correctly implementing the explicit splay operation. However, it would be more efficient if you used a while loop with two cases (NodeToBeSplayed is left child and NodeToBeSplayed is right child) instead of two nested if-else statements, as it would eliminate the redundant check for Parent == nullptr. Additionally, in the while loop, you should update the NodeToBeSplayed to its new parent after each rotation.




Pawan Nirpal
what is the reason behind this optimization why will this optimize the ExplicitSplay
The reason behind this optimization is that the Splay tree is a self-balancing binary search tree. The Splay operation is used to move a node closer to the root of the tree, which helps to reduce the average height of the tree and thus improves its overall performance. The optimization is used to perform the Splay operation efficiently by using rotations to reorder the tree. The use of rotations in the Splay operation allows for quick access to the desired node, which reduces the time complexity of the operations performed on the Splay tree.




Pawan Nirpal
show me how you would optimize it write the optimized function 
The function can be optimized by using Zig-Zag and Zig-Zig rotations to perform the splaying operation in O(log n) time on average. Here is one way to optimize the function:

scss
Copy code
Node *ExplicitSplay(Node *NodeToBeSplayed){
    while(NodeToBeSplayed->Parent!=nullptr){
      Node *Parent = NodeToBeSplayed->Parent; 
      Node *GrandParent = Parent->Parent;
      if(Parent==nullptr) return NodeToBeSplayed;
      if(GrandParent==nullptr){
        if(NodeToBeSplayed->Value<Parent->Value){// This is left node hence right rotate
          RightRotateSubtree(Parent);
        }else{
          LeftRotateSubtree(Parent);
        }
      }else{
        if((NodeToBeSplayed->Value<Parent->Value)==(Parent->Value<GrandParent->Value)){
          // Both values are on the same side
          if(NodeToBeSplayed->Value<Parent->Value){
            RightRotateSubtree(GrandParent);
            RightRotateSubtree(Parent);
          }else{
            LeftRotateSubtree(GrandParent);
            LeftRotateSubtree(Parent);
          }
        }else{
          if(NodeToBeSplayed->Value<Parent->Value){
            RightRotateSubtree(Parent);
            LeftRotateSubtree(Parent);
          }else{
            LeftRotateSubtree(Parent);
            RightRotateSubtree(Parent);
          }
        }
      }
    }
    SetRoot(NodeToBeSplayed);
    return TreeRoot;
  }